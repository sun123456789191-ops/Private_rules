/**
 * Clash配置转换脚本 (由 YAML 转换而来，并规范化为 DIRECT/REJECT 版)
 * 目标：
 * 1. 重新构建 proxy-groups、rules 和 rule-providers。
 * 2. 规范化节点名称：'直连' -> 'DIRECT'。
 */
function main(config) {
    // --------------------------------------------------
    // 核心规范化：定义 Clash 内置代理名
    // --------------------------------------------------
    const DIRECT = "DIRECT";
    const REJECT = "REJECT"; // 您的 YAML 中没有用到 '拒绝'，但保留 REJECT 选项是好习惯。

    // --------------------------------------------------
    // 策略组定义 (Proxy Groups)
    // --------------------------------------------------

    // 注意：所有的 '直连' 都已替换为 'DIRECT'。

    const proxyGroups = [
        { 
            name: "🚀 默认代理", 
            type: "select", 
            proxies: ["🔯 香港故转", "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "📹 YouTube", 
            type: "select", 
            proxies: ["🔯 香港故转", "🔯 美国故转",  "🔯 日本故转", "🔯 狮城故转", "♻️ 美国自动", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "🍀 Google", 
            type: "select", 
            proxies: ["🔯 香港故转", "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "🤖 ChatGPT", 
            type: "select", 
            proxies: ["🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "👨🏿‍💻 GitHub", 
            type: "select", 
            proxies: ["🔯 香港故转", "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "🐬 OneDrive", 
            type: "select", 
            proxies: [DIRECT, "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点"] 
        },
        { 
            name: "🪟 Microsoft", 
            type: "select", 
            proxies: [DIRECT, "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点"] 
        },
        { 
            name: "🎵 TikTok", 
            type: "select", 
            proxies: ["🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "📲 Telegram", 
            type: "select", 
            proxies: ["🔯 香港故转", "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "🎥 NETFLIX", 
            type: "select", 
            proxies: ["🔯 狮城故转", "🔯 香港故转", "🔯 日本故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "💶 PayPal", 
            type: "select", 
            proxies: ["🔯 日本故转", "🔯 香港故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        { 
            name: "🐟 漏网之鱼", 
            type: "select", 
            proxies: ["🚀 默认代理", "🔯 香港故转", "🔯 日本故转", "🔯 狮城故转", "🔯 美国故转", "♻️ 香港自动", "♻️ 日本自动", "♻️ 狮城自动", "♻️ 美国自动", "♻️ 自动选择", "🇭🇰 香港节点", "🇯🇵 日本节点", "🇸🇬 狮城节点", "🇺🇲 美国节点", "🌐 全部节点", DIRECT] 
        },
        // 自动选择和过滤组
        {name: "🇭🇰 香港节点", type: "select", "include-all": true, filter: "(?i)港|hk|hongkong|hong kong"},
        {name: "🇯🇵 日本节点", type: "select", "include-all": true, filter: "(?i)日|jp|japan"},
        {name: "🇸🇬 狮城节点", type: "select", "include-all": true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"},
        {name: "🇺🇲 美国节点", type: "select", "include-all": true, filter: "(?i)美|us|unitedstates|united states"},
        
        // Fallback (故转) 组
        {name: "🔯 香港故转", type: "fallback", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"},
        {name: "🔯 日本故转", type: "fallback", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"},
        {name: "🔯 狮城故转", type: "fallback", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$"},
        {name: "🔯 美国故转", type: "fallback", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$"},
        
        // URL-Test (自动) 组
        {name: "♻️ 香港自动", type: "url-test", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"},
        {name: "♻️ 日本自动", type: "url-test", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"},
        {name: "♻️ 狮城自动", type: "url-test", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$"},
        {name: "♻️ 美国自动", type: "url-test", "include-all": true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"},
        {name: "♻️ 自动选择", type: "url-test", "include-all": true, tolerance: 20, interval: 300, filter: `^((?!(${DIRECT})).)*$`} // 规范化：排除 DIRECT
        ,
        {name: "🌐 全部节点", type: "select", "include-all": true}
    ];

    config["proxy-groups"] = proxyGroups;

    // --------------------------------------------------
    // 规则集提供者 (Rule Providers)
    // --------------------------------------------------

    // 定义锚点对象
    const ruleAnchor = {
        ip: { type: "http", interval: 86400, behavior: "ipcidr", format: "mrs" },
        domain: { type: "http", interval: 86400, behavior: "domain", format: "mrs" },
        class: { type: "http", interval: 86400, behavior: "classical", format: "text" }
    };
    
    // 重新定义 rule-providers
    config["rule-providers"] = {
        "private_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"},
        "proxylite": { ...ruleAnchor.class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"},
        "ai": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" },
        "youtube_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"},
        "google_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"},
        "github_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"},
        "telegram_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"},
        "netflix_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"},
        "paypal_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"},
        "onedrive_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"},
        "microsoft_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"},
        "apple_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs"},
        "speedtest_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"},
        "tiktok_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"},
        "geolocation-!cn": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"},
        "cn_domain": { ...ruleAnchor.domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"},
        "private_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"},
        "cn_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"},
        "google_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"},
        "telegram_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"},
        "netflix_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"},
        "apple_ip": { ...ruleAnchor.ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs"}
    };

    // --------------------------------------------------
    // 规则匹配 (Rules)
    // --------------------------------------------------

    // 注意：所有的 '直连' 都已替换为 'DIRECT'。
    config["rules"] = [
        `RULE-SET,private_ip,${DIRECT},no-resolve`,
        `RULE-SET,private_domain,${DIRECT}`,
        `RULE-SET,proxylite,🚀 默认代理`,
        `RULE-SET,ai,🤖 ChatGPT`,
        `RULE-SET,github_domain,👨🏿‍💻 GitHub`,
        `RULE-SET,youtube_domain,📹 YouTube`,
        `RULE-SET,google_domain,🍀 Google`,
        `RULE-SET,onedrive_domain,🐬 OneDrive`,
        `RULE-SET,microsoft_domain,🪟 Microsoft`,
        `RULE-SET,apple_domain,${DIRECT}`,
        `RULE-SET,tiktok_domain,🎵 TikTok`,
        `RULE-SET,telegram_domain,📲 Telegram`,
        `RULE-SET,netflix_domain,🎥 NETFLIX`,
        `RULE-SET,paypal_domain,💶 PayPal`,
        `RULE-SET,apple_ip,${DIRECT}`,
        `RULE-SET,google_ip,🍀 Google`,
        `RULE-SET,netflix_ip,🎥 NETFLIX`,
        `RULE-SET,telegram_ip,📲 Telegram`,
        `RULE-SET,geolocation-!cn,🚀 默认代理`,
        `RULE-SET,cn_domain,${DIRECT}`,
        `RULE-SET,cn_ip,${DIRECT}`,
        `MATCH,🐟 漏网之鱼`
    ];

    return config;
}
